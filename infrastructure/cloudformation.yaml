# see https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md

AWSTemplateFormatVersion: "2010-09-09"
Description: Notifies on activity in your AWS account
Transform: "AWS::Serverless-2016-10-31"
Parameters:
  CloudTrailCloudWatchLogsGroupName:
    Type: String
    Description: Enter the CloudWatch Logs Group Name. The default is CloudTrail/DefaultLogGroup
    Default: "CloudTrail/DefaultLogGroup"
  CloudTrailCloudWatchLogsFilterPattern:
    Type: String
    Description: Enter the Cloudwatch Logs Filter pattern you would like to alert on
    Default: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") }'
  SlackWebhookURL:
    Type: String
    Description: Enter your Slack Webhook URL
    NoEcho: true
Conditions:
  CloudTrailConfigured:
    !Not [!Equals [!Ref CloudTrailCloudWatchLogsGroupName, ""]]
Resources:
  StackKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: KMS Key used for storing the secrets involved with the AWS Activity Aware tool
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS:
                !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
  StackKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName:
        !Sub "alias/${AWS::StackName}-Key"
      TargetKeyId:
        !GetAtt StackKey.Arn
  EncryptionLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Backs a CloudFormation Custom Resource for encypting values with a specified KMS Key
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "kms:Encrypt"
                - "kms:DescribeKey"
                - "kms:GenerateDataKey"
              Resource:
                -
                  !GetAtt StackKey.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      Timeout: 15
      CodeUri: "s3://giftbit-public-resources/cloudformation/lambda-backed-cloud-formation-kms-encryption/lambda/20170102-1440.zip"
  EncryptedSlackWebhookURL:
    Type: "AWS::CloudFormation::CustomResource"
    Version: "1.0"
    Properties:
      ServiceToken:
        !GetAtt EncryptionLambda.Arn
      KeyId:
        !GetAtt StackKey.Arn
      PlainText:
        Ref: "SlackWebhookURL"
  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: AWS Aware Notifications
  SourceCloudtrailCloudwatchLogsLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Converts CloudTrail CloudWatch Logs events into a form acceptable to the Notifiers via SNS
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: 15
      CodeUri: ../dist/sources-cloudtrail-cloudwatch-logs/sources-cloudtrail-cloudwatch-logs.zip
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "sns:Publish"
              Resource:
                -
                  Ref: "SNSTopic"
      Environment:
        Variables:
          SNS_TOPIC:
            Ref: "SNSTopic"
  SourceCloudtrailCloudwatchLogsPermission:
    Type: "AWS::Lambda::Permission"
    Condition: CloudTrailConfigured
    Properties:
      FunctionName:
        !GetAtt SourceCloudtrailCloudwatchLogsLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal:
        !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceAccount:
        Ref: "AWS::AccountId"
      SourceArn:
        !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudTrailCloudWatchLogsGroupName}:*"
  CloudWatchLogsSubscriptionFilter:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: CloudTrailConfigured
    Properties:
      DestinationArn:
        !GetAtt SourceCloudtrailCloudwatchLogsLambda.Arn
      FilterPattern:
        Ref: CloudTrailCloudWatchLogsFilterPattern
      LogGroupName:
        Ref: CloudTrailCloudWatchLogsGroupName
    DependsOn: SourceCloudtrailCloudwatchLogsPermission
  DestinationSlackLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Sends Notifications from the subscribed SNS Topic to Slack
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: 15
      CodeUri: ../dist/destinations-slack/destinations-slack.zip
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "kms:decrypt"
              Resource:
                -
                  !GetAtt StackKey.Arn
      Environment:
        Variables:
          SLACK_WEBHOOK_URL:
            !GetAtt EncryptedSlackWebhookURL.CipherText
  SNSTopicDestinationSlackLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: "SNSTopic"
      FunctionName:
        !GetAtt DestinationSlackLambda.Arn
  DestinationSlackSNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn:
        Ref: "SNSTopic"
      Endpoint:
        !GetAtt DestinationSlackLambda.Arn
      Protocol: lambda
